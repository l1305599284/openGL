#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
// 顶点世界坐标
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
// uniform sampler2D myTextureSampler;
uniform sampler2D myTextureSampler;


void main(){
    vec3 LightColor = vec3(1,1,1);
    vec3 LightPosition_worldspace =  vec3(10,10,10);
	float LightPower = 500.0f;
    float distance = length( LightPosition_worldspace - Position_worldspace );
    // 视图空间法线归一化
	vec3 n = normalize( Normal_cameraspace );
    // 视图空间光照方向向量归一化
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );

    // 基础颜色
    vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
    // 环境光叠加
    vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
    vec3 E = normalize(EyeDirection_cameraspace);
    vec3 R = reflect(-l,n);
    float cosAlpha = clamp( dot( E,R ), 0,1 );
    // 平行光
    vec3 MaterialDiffuseColorOut  = MaterialDiffuseColor * LightColor * LightPower* cosTheta / (distance*distance);
    // 反射光
    vec3 MaterialSpecularColorOut = vec3(0.3,0.3,0.3) * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
    vec3 rgbColor = MaterialAmbientColor + MaterialDiffuseColorOut + MaterialSpecularColorOut;
    color = vec4(rgbColor.x,rgbColor.y,rgbColor.z,0.6);
}